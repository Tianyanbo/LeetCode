/*Validate if a given string is numeric.

Some examples:
"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true
Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.
*/

public class Solution {
	public boolean isNumber(String s) {
		if (s == null || "".equals(s)) {
			return false;
		}
		s = s.trim();
		if (s.length() <= 0) {
			return false;
		}
		if (s.contains(" ")) {
			return false;
		}
		if (s.contains("e")) {
			if(countStr(s,"e")!=1){
				return false;
			}
			String[] s_temp = s.split("e");
			if (s_temp.length != 2) {
				return false;
			} else {
				return hasDot(true, s_temp[0]) && hasDot(false, s_temp[1]);
			}
		} else {
			if (s.contains(".")) {
				return hasDot(true, s);
			} else {
				return hasDot(false, s);
			}

		}

	}

	private boolean hasDot(boolean hasdot, String s) {
		if (s == null || "".equals(s)) {
			return false;
		}
		if((countStr(s,"-")!=1&&countStr(s,"-")!=0)||(countStr(s,"+")!=1&&countStr(s,"+")!=0)){
		    return false;
		}else if(countStr(s,"-")==1){
		    if(s.indexOf("-")!=0){
		        return false;
		    }else{
		        s = s.substring(1);
		    }
		    
		}else if(countStr(s,"+")==1){
		    if(s.indexOf("+")!=0){
		        return false;
		    }else{
		        s = s.substring(1);
		    }
		    
		}
		if (hasdot) {
			if(countStr(s,".")!=1&&countStr(s,".")!=0){
				return false;
			}
			String[] s_temp = s.split("\\.");
			if (s_temp.length < 1) {
				return false;
			} else {
				if (s_temp.length == 1) {
					char[] c_temp = s_temp[0].toCharArray();
					if (!allNumber(c_temp)) {
						return false;
					} else {
						return true;
					}
				}
				
				if (s_temp.length == 2) {
					if (s_temp[0].equals("")) {
						s_temp[0] = "0";
					}
					for (String s_c : s_temp) {
						char[] c_temp = s_c.toCharArray();
						if (!allNumber(c_temp)) {
							return false;
						}
					}
					return true;

				} else {
					return false;
				}

			}
		} else {
			if (s.contains(".")) {
				return false;
			}
			char[] c_temp = s.toCharArray();
			if (!allNumber(c_temp)) {
				return false;
			} else {
				return true;
			}
		}
	}

	private boolean allNumber(char[] cs) {
		char[] tenNumber = new char[] { '1', '2', '3', '4', '5', '6', '7', '8', '9', '0' };
		if (cs == null || cs.length <= 0) {
			return false;
		}
		for (char temp : cs) {
			boolean flag_check = false;
			for (char ten_temp : tenNumber) {
				if (ten_temp == temp) {
					flag_check = true;
				}
			}
			if (!flag_check) {
				return false;
			}
		}
		return true;

	}
	public int countStr(String str1, String str2) { 
		int pos = -2;
	    int n = 0;
	 
	    while (pos != -1) {
	        if (pos == -2) {
	            pos = -1;
	        }
	        pos = str1.indexOf(str2, pos + 1);
	        if (pos != -1) {
	            n++;
	        }
	    }
	    return n;  
    }  

	public static void main(String[] args) {
		Solution solution = new Solution();
		System.out.println(solution.isNumber(".3."));
	}
}
