/*
Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits. You should try to optimize your time and space complexity.

Example 1:
nums1 = [3, 4, 6, 5]
nums2 = [9, 1, 2, 5, 8, 3]
k = 5
return [9, 8, 6, 5, 3]

Example 2:
nums1 = [6, 7]
nums2 = [6, 0, 4]
k = 5
return [6, 7, 6, 0, 4]

Example 3:
nums1 = [3, 9]
nums2 = [8, 9]
k = 3
return [9, 8, 9]

*/
class Solution {
    public int[] maxNumber(int[] nums1, int[] nums2, int k) {
	        int[] result = new int[k];
	        for(int i = 0;i<=k;i++){
                if(i>nums1.length||k-i>nums2.length){
	        		continue;
	        	}
	            int [] temp1 = maxArray(nums1, i);
	            int [] temp2 = maxArray(nums2, k-i);
	            int [] temp3 = merge(temp1, temp2, k);
	            if(greater(temp3, 0, result, 0)) result = temp3;
	        }
	        return result;
	    }
	 
	 public int[] maxArray(int [] nums,int k){
		 int[] result = new int[k];
		 int length = nums.length;
		 for(int i = 0,j=0;i<length;i++){
			 while(j>0&&k-(j-1)<=length-i&&result[j-1]<nums[i]){
				 j--;
			 }
			 if(j<k){
				 result[j] = nums[i];
				 j++;
			 }
		 }
		 return result;
	 } 
	 
	 public boolean greater(int[] nums1,int start1,int[] nums2,int start2){
		 while(start1<nums1.length&&start2<nums2.length){
			 if(nums1[start1]>nums2[start2]){
				 return true;
			 }
			 if(nums1[start1]<nums2[start2]){
				 return false;
			 }
			 start1 = start1+1;
			 start2 = start2+1;
		 }
		 return start1 != nums1.length;
         
	 }
	 
	 public int[] merge(int[] nums1,int[] nums2,int k){
		 int[] result = new int[k];
		 int i=0,j=0;
		 for(int m=0;m<k;m++){
			 if(greater(nums1,i,nums2,j)){
				 result[m] = nums1[i];
				 i++;
			 }else{
				 result[m] = nums2[j];
				 j++; 
			 }
		 }
		 return result;
	 }
}
