/*
Given an absolute path for a file (Unix-style), simplify it.

For example,
path = "/home/", => "/home"
path = "/a/./b/../../c/", => "/c"
click to show corner cases.

Corner Cases:
Did you consider the case where path = "/../"?
In this case, you should return "/".
Another corner case is the path might contain multiple slashes '/' together, such as "/home//foo/".
In this case, you should ignore redundant slashes and return "/home/foo".
*/
class Solution {
    public String simplifyPath(String path) {
       Deque<String> pathStack = new LinkedList<>();
	        String[] paths = path.split("/");
	        for(String temp : paths){
	            if(pathStack.isEmpty()){
	                if(!"..".equals(temp)&&!temp.equals(".")&&!temp.equals("")){
	                    pathStack.push(temp);    
	                }
	            }else{
	            	if(temp.equals("..")){
		                if(!pathStack.isEmpty()){
		                    pathStack.pop();
		                }
		            }else if(!temp.equals(".")&&!temp.equals("")){
		                pathStack.push(temp);    
		            }
	            }
	        }
	        StringBuilder sb = new StringBuilder();
	        sb.append("/");
	        while(!pathStack.isEmpty()){
	        	String temp = pathStack.pollLast();
	        	if(!temp.equals("")){
	                sb.append(temp);
	                if(!pathStack.isEmpty()){
	                	 sb.append("/");
	                }
	            }
	        }
	        String result = sb.toString();
	        /*if(result.length()>1){
	        	result = result.substring(0,result.length()-1);
	        }*/
	        return result;
    }
}
