/*
Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.
*/
public class BSTIterator {
    TreeNode now = null;
    Stack<TreeNode> stack = null;
    public BSTIterator(TreeNode root) {
        now = root;
        stack = new Stack<TreeNode>();
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return stack.isEmpty()||now = null;
    }

    /** @return the next smallest number */
    public int next() {
        while(now!=null){
            stack.push(now);
            now = now.left;
        }
        TreeNode temp = stack.pop();
        now = temp.right;
        return t.val;
    }
}
