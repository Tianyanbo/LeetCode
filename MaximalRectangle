/*
class Solution {
    public int maximalRectangle(char[][] matrix) {
        int longest = 0;
        int length = matrix.length;
        if(length==0){
            return 0;
        }
        int width = matrix[0].length;
        for(int i=0;i<length;i++){
            for(int j=0;j<width;j++){
                if(matrix[i][j]=='1'&&(length-i)*(width-j)>longest){
                    int temp =1+ maximalRectangle(matrix,i,j,i,j);
                    longest = Math.max(temp,longest);
                }
            }
        }
        return longest;
        
    }
    
    public int maximalRectangle(char[][] matrix,int startx,int starty,int endx,int endy){
        int longest = 0;
        boolean x_flag = false;
        boolean y_flag = false;
        int length = matrix.length;
        int width = matrix[0].length;
        if(endx+1<length&&matrix[endx+1][starty]=='1'){
            boolean result = true;
            for(int i = starty+1;i<=endy;i++){
                if(matrix[endx+1][i]!='1'){
                    result = false;
                    break;
                }
            }
            if(result){
                x_flag = true;
            }
        }
        if(endy+1<width&&matrix[startx][endy+1]=='1'){
            boolean result = true;
            for(int i = startx+1;i<=endx;i++){
                if(matrix[i][endy+1]!='1'){
                    result = false;
                    break;
                }
            }
            if(result){
                y_flag = true;
            }
        }
             if(x_flag&&y_flag&&matrix[endx+1][endy+1]=='1'){
	            longest = endy+endx-startx-starty+1+1+1+maximalRectangle(matrix,startx,starty,endx+1,endy+1);
	        }
	        	if(x_flag){
		            int temp  = endy-starty+1+maximalRectangle(matrix,startx,starty,endx+1,endy);
		            longest = Math.max(temp, longest);
		        }
		        if(y_flag){
		            int temp = endx-startx+1+maximalRectangle(matrix,startx,starty,endx,endy+1);
		            longest = Math.max(temp, longest);
		        }
		        
	        
        return longest;
    }
}
*/
